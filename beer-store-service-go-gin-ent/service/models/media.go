// Code generated by entc, DO NOT EDIT.

package models

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sombriks/rosetta-beer-store/beer-store-service-go-gin-ent/service/models/media"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Idmedia holds the value of the "idmedia" field.
	Idmedia int `json:"idmedia,omitempty"`
	// Creationdatemedia holds the value of the "creationdatemedia" field.
	Creationdatemedia time.Time `json:"creationdatemedia,omitempty"`
	// Datamedia holds the value of the "datamedia" field.
	Datamedia []byte `json:"datamedia,omitempty"`
	// Nomemedia holds the value of the "nomemedia" field.
	Nomemedia string `json:"nomemedia,omitempty"`
	// Mimemedia holds the value of the "mimemedia" field.
	Mimemedia string `json:"mimemedia,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldDatamedia:
			values[i] = new([]byte)
		case media.FieldID, media.FieldIdmedia:
			values[i] = new(sql.NullInt64)
		case media.FieldNomemedia, media.FieldMimemedia:
			values[i] = new(sql.NullString)
		case media.FieldCreationdatemedia:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Media", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case media.FieldIdmedia:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field idmedia", values[i])
			} else if value.Valid {
				m.Idmedia = int(value.Int64)
			}
		case media.FieldCreationdatemedia:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creationdatemedia", values[i])
			} else if value.Valid {
				m.Creationdatemedia = value.Time
			}
		case media.FieldDatamedia:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field datamedia", values[i])
			} else if value != nil {
				m.Datamedia = *value
			}
		case media.FieldNomemedia:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nomemedia", values[i])
			} else if value.Valid {
				m.Nomemedia = value.String
			}
		case media.FieldMimemedia:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mimemedia", values[i])
			} else if value.Valid {
				m.Mimemedia = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return (&MediaClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("models: Media is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", idmedia=")
	builder.WriteString(fmt.Sprintf("%v", m.Idmedia))
	builder.WriteString(", creationdatemedia=")
	builder.WriteString(m.Creationdatemedia.Format(time.ANSIC))
	builder.WriteString(", datamedia=")
	builder.WriteString(fmt.Sprintf("%v", m.Datamedia))
	builder.WriteString(", nomemedia=")
	builder.WriteString(m.Nomemedia)
	builder.WriteString(", mimemedia=")
	builder.WriteString(m.Mimemedia)
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media

func (m MediaSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
